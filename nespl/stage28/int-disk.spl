// // breakpoint;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 11] * 512 - 1;

backup;

R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;

[DISK_STATUS_TABLE + 0] = 0;

alias counter R5;
counter = 0;
while (counter < 16) do
    if ([PROCESS_TABLE + counter*16 + 4] == WAIT_DISK) then
        [PROCESS_TABLE + counter*16 + 4] = READY;
    endif;
    counter = counter + 1;
endwhile;

R1 = RELEASE_LOCK;
R2 = KERN_LOCK;
call ACCESS_CONTROL;

restore;

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 13];

// // breakpoint;
ireturn;










// // Initialize SP (kernel stack pointer) to (user area page number)*512 -1.
// [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 13] = SP;
// SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 11] * 512  - 1 ;

// // Save user stack value for later use, set up the kernel stack
// // Store the value of register SP in the UPTR field of the process table entry of the current process.

// backup;

// // Aquire the kernel
// R1 = ACQUIRE_KERN_LOCK;
// call ACCESS_CONTROL;

// [DISK_STATUS_TABLE + 0] = 0; //Disk is no longer busy

// // Set the MODE FLAG in the process table to system call number of exec.
// // [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1]*16) + 9] = 9;


// // Go through all the process table entries, and change the state of the process to READY, which is in WAIT_DISK state.
// alias iter R1;
// iter = 0;
// while(iter <  16) do
//     if (([PROCESS_TABLE +16*iter+ 4] == WAIT_DISK)) then
//         [PROCESS_TABLE +16*iter+ 4] = READY;
//     endif;
//     iter=iter+1;
// endwhile;

// // Release the Kernel
// R1 = RELEASE_LOCK;
// R2 = KERN_LOCK;
// call ACCESS_CONTROL;

// // Restore the register context and return to user mode using the ireturn statement.
// restore;
// // Change SP to UPTR field from the process table entry of the currently running process and return to the user mode. 
// // Switch back to us er stack
// SP = [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 5*CORE + 1] + 13];
// ireturn;

