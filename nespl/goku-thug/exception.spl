// //breakpoint;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+5*CORE+1]*16 + 9] = -1;			//SETTING THE MODE BIT TO -1 indicating exception;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+5*CORE+1]*16 + 13] = SP;			//UPTR=SP;
SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+5*CORE+1]*16 + 11]*512-1 ;		//SP=USER AREA PAGE

backup;
multipush(EIP);

alias userSP R1;
userSP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+5*CORE+1]*16 + 13];

if(  (EC!=0) || (userSP==((PTLR*512)-1)) )
then
	if(EC==1)
	then
        breakpoint;
		print "ILLEGAL INSTRUCTION" ;
        breakpoint;
	endif;
	
	if(EC==2)
	then
		print "ILLEGAL MEMORY ADDRESS";
	endif;
	
	
	if(EC==3)
	then
		print "ARITHMETIC EXCEPTION";
	endif;
	
	
	if((userSP==((PTLR*512)-1)))
	then
		print "USER STACK OVERFLOW";
	endif;
	
	
	multipush(R1);
		R1=EXIT_PROCESS;
		R2=[SYSTEM_STATUS_TABLE+5*CORE+1];
		call PROCESS_MANAGER;					//PROCESS_MANAGER
	multipop(R1);

    // multipush(R1,R2);
    //     R1=RELEASE_LOCK;
    //     R2=KERN_LOCK;
    //     call ACCESS_CONTROL;
    // multipop(R1,R2);

	// multipush(R1);
	call SCHEDULER;						//SCHEDULER MODULE
	// multipop(R1);

    // multipush(R1,R2);
    // R1=ACQUIRE_KERN_LOCK;
    // call ACCESS_CONTROL;
    // multipop(R1,R2);
endif;

multipush (R1);
R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;
multipop  (R1);

if(EC==0)
then
	alias mem_page R0;
	alias disk_block R2;
	
	if((EPN==2) || (EPN==3))				//HEAP PAGES	
	then
		
	    // print("Heap Page unallocated");
	   
	    multipush(R1, EPN);
		R1 = GET_FREE_PAGE;									//Get Free Page
		// R2 = [SYSTEM_STATUS_TABLE+5*CORE+1];
		call MEMORY_MANAGER;	                //Memory_page
		// mem_page = R0;
		[PTBR+4] = R0;
		[PTBR+5] = "1110";
        
        // multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,EPN);

        R1 = GET_FREE_PAGE;									//Get Free Page
		call MEMORY_MANAGER;
		// mem_page=R0;                //Stores the return value;
		[PTBR+6] = R0;
		[PTBR+7] = "1110";
		
	    // multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,EPN);
        multipop(R1, EPN);
	endif;
	
	if(EPN >= 4 && EPN <= 7) then	
		//print("Code Page unallocated");
	
		multipush(R1, EPN);
        R1 = GET_CODE_PAGE;							//Get CodePage
        R2 = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+5*CORE+1]*10 + EPN];
        call MEMORY_MANAGER;						//Memory manager module(get code page)	
        
        [PTBR + 2*EPN] = R0;						//Validating the page table entries for the first code page.
        [PTBR + 2*EPN + 1] = "1100";
		multipop(R1, EPN);		
	endif;
endif;

multipush (R1);
R1 = RELEASE_LOCK;
R2 = KERN_LOCK;
call ACCESS_CONTROL;
multipop  (R1);

multipop (EIP);
restore; 

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+5*CORE+1]*16 + 9]=0;			//SETTING THE MODE BIT TO 0 indicating exception;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+5*CORE+1]*16 + 13];			//SP=UPTR;
SP = SP+1;

[[PTBR + 2*(SP/PAGE_SIZE)]*512+(SP%PAGE_SIZE)] = EIP;

EC=-1;
EPN=-1;
////breakpoint;
ireturn;